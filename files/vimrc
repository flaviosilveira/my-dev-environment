set nocompatible              " be iMproved, required
filetype off                  " required

" Vundle 
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Plugins
" Tree of the files
Plugin 'scrooloose/nerdtree'
" Infos of the files
Plugin 'vim-airline/vim-airline'
" Surround variables, words and etc
Plugin 'tpope/vim-surround'
" Search Files
Plugin 'ctrlpvim/ctrlp.vim'
" HTML auto generate
Plugin 'mattn/emmet-vim'
" Auto Update to tags / Ctags
Plugin 'craigemery/vim-autotag'
" Engine and tools for snippets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
" PHP completion, refactoring and introspection 
Plugin 'phpactor/phpactor'
" ncm2 - completion
Plugin 'ncm2/ncm2'
Plugin 'phpactor/ncm2-phpactor'
" PHP Syntax
Plugin 'StanAngeloff/php.vim'

" All of your Plugins before this line
call vundle#end()            " required
filetype plugin indent on    " required

" Open NERDTree
autocmd vimenter * NERDTree

" CtrlP to use ripgrep as file finder
if executable('rg')
  let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --glob ""'
endif"

" NERDTree delimiter
set encoding=utf-8

"set configs
set number
set relativenumber
set showcmd
set ignorecase
set bs=2
" Colum Limit
set colorcolumn=81
"show existing tab with 2 spaces width
set tabstop=2
"when indenting with '>', use 2 spaces width
set shiftwidth=2
"On pressing tab, insert 2 spaces
set expandtab
"Syntax helper / colors and so on
syntax on

" Map to use enter in autocomplete pop up and dont add a new line
inoremap <expr> <silent> <cr> pumvisible() ? "<c-y>" : "<cr>"
" Map ; to : - just one key
nnoremap ; :
" Map Autocomplete braces
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}
" Map Autocomplete Square brackets
inoremap [      []<Left>
inoremap [<CR>  [<CR>]<Esc>O
inoremap [[     [
inoremap []     []
" Map Autocomplete Parentheses
inoremap        (  ()<Left>
inoremap <expr> )  strpart(getline('.'), col('.')-1, 1) == ")" ? "\<Right>" : ")"
" Map Single Quotes
inoremap <expr> ' strpart(getline('.'), col('.')-1, 1) == "\'" ? "\<Right>" : "\'\'\<Left>"
" Map Double Quotes
inoremap <expr> " strpart(getline('.'), col('.')-1, 1) == "\"" ? "\<Right>" : "\"\"\<Left>"
